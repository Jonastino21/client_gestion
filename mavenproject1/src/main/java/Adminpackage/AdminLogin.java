/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Adminpackage;

import java.awt.BorderLayout;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

import java.sql.SQLException;

import java.sql.SQLException;
import javax.swing.JButton;
import javax.swing.JFrame;

/**
 *
 * @author zikrea
 */
public class AdminLogin extends javax.swing.JFrame {
    /**
     * Creates new form NewJFrame
     *
     * @throws java.sql.SQLException
     */
    public AdminLogin() throws SQLException {
        initComponents();
        createDatabase();
        Connect();
        createTable();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        champ_mail1 = new javax.swing.JTextField();
        champ_pass1 = new javax.swing.JPasswordField();
        mail1 = new javax.swing.JLabel();
        password1 = new javax.swing.JLabel();
        login1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Page de connexion admin");
        setBackground(new java.awt.Color(0, 102, 102));
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        mail1.setText("Adresse email");

        password1.setText("Mot de passe");

        login1.setBackground(new java.awt.Color(102, 204, 255));
        login1.setText("Se connecter");
        login1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                login1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Cantarell", 1, 36)); // NOI18N
        jLabel2.setText("Three L");

        jButton2.setBackground(new java.awt.Color(51, 255, 204));
        jButton2.setText("S'inscrire");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(379, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mail1)
                            .addComponent(password1)
                            .addComponent(champ_pass1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(champ_mail1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(jLabel2)))
                        .addGap(370, 370, 370))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(login1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(423, 423, 423))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(447, 447, 447))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(jLabel2)
                .addGap(39, 39, 39)
                .addComponent(mail1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(champ_mail1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(password1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(champ_pass1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(login1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(31, 31, 31))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel5, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        close();
        AdminSignUp ap = new AdminSignUp();
        ap.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void login1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_login1ActionPerformed
        try {
            // TODO add your handling code here:
            recupUser();
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(AdminLogin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_login1ActionPerformed
    static Connection con = null;

    public static Connection Connect() {
        String url = "jdbc:mysql://localhost:3306/jonastino";
        String user = "root";
        String pass = "";

        if (AdminLogin.con == null) {
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                AdminLogin.con = (Connection) DriverManager.getConnection(url, user, pass);
                con.setAutoCommit(true);
            } 
            catch (ClassNotFoundException | SQLException e){
                 System.out.println("Erreur de connexion à la base de données : " + e.getMessage());
            }
        }
        System.out.println("non");
        return AdminLogin.con;
    }
    
    
       public void recupUser() throws SQLException, ClassNotFoundException {
        AdminSignUp as = new AdminSignUp();

        String sql = "SELECT * FROM admin WHERE Adresse_mail = ? AND Mot_de_passe = ?";
        if (con != null) {

            try (PreparedStatement preparedStatement = con.prepareStatement(sql)) {

                String email = champ_mail1.getText();
                char[] mdpArray = champ_pass1.getPassword();

                String passw = new String(mdpArray);

                preparedStatement.setString(1, email);
                preparedStatement.setString(2, as.hashPassword(passw));
                
                ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                JOptionPane.showMessageDialog(null, "Opération réussie", "Succès", JOptionPane.INFORMATION_MESSAGE);
                System.out.println("Ok");
                close();
                AdminPage ap = AdminPage.getInstance();
                ap.setVisible(true);
            }else {
                    JOptionPane.showMessageDialog(null, "Veuillez bien vérifier vos Identifiant ou mot de passe", "Erreur", JOptionPane.ERROR_MESSAGE);
                    System.out.println("Non");
                }
            }
        } else {
            System.out.println("La connexion à la base de données est nulle.");
        }

    }


    public void close() {
        WindowEvent closeWindow = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);
    }


    private void createTable() throws SQLException {

        String sqladmin = "CREATE TABLE IF NOT EXISTS admin ("
                + "Id_admin INT PRIMARY KEY AUTO_INCREMENT, "
                + "Nom VARCHAR(100) NOT NULL, "
                + "Prenoms VARCHAR(100) NOT NULL, "
                + "Date_de_naissance VARCHAR(30) NOT NULL, "
                + "Sexe VARCHAR(10) NOT NULL, "
                + "Cin VARCHAR(12) NOT NULL, "
                + "Telephone VARCHAR(15) NOT NULL, "
                + "Adresse_mail VARCHAR(100) NOT NULL, "
                + "Mot_de_passe VARCHAR(100) NOT NULL,"
                + "created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,"
                + "updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP)";

        String sqlemploye = "CREATE TABLE IF NOT EXISTS employe ("
                + "Id_employe INT PRIMARY KEY AUTO_INCREMENT, "
                + "Nom VARCHAR(100) NOT NULL, "
                + "Prenoms VARCHAR(100) NOT NULL, "
                + "Date_de_naissance VARCHAR(30) NOT NULL, "
                + "Sexe VARCHAR(10) NOT NULL, "
                + "Cin VARCHAR(12) NOT NULL, "
                + "Telephone VARCHAR(15) NOT NULL, "
                + "Adresse_mail VARCHAR(100) NOT NULL, "
                + "Mot_de_passe VARCHAR(100) NOT NULL,"
                + "Log BOOLEAN DEFAULT 0, "
                + "created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,"
                + "updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP)";
        String sqlclient = "CREATE TABLE IF NOT EXISTS client ("
                + "Id_client INT PRIMARY KEY AUTO_INCREMENT, "
                + "Nom VARCHAR(100) NOT NULL, "
                + "Prenoms VARCHAR(100) NOT NULL, "
                + "Date_de_naissance VARCHAR(30) NOT NULL, "
                + "Sexe VARCHAR(10) NOT NULL, "
                + "Adresse VARCHAR(50) NOT NULL, "
                + "Cin VARCHAR(12) NOT NULL, "
                + "Telephone VARCHAR(15) NOT NULL, "
                + "Id_employe INT NOT NULL, "
                + "Tranche_paiement INT NOT NULL, "
                + "Mesure_trano INT NOT NULL, "
                + "Prix_total INT NOT NULL, "
                + "First_payment INT NOT NULL, "
                + "Reste_apaye INT NOT NULL, "
                + "Prix_par_mois_reste INT NOT NULL,"
                + "Date_1er_paiement  DATE NOT NULL,"
                 + "created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,"
                + "updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP)";

        String sqlprimc = "CREATE TABLE IF NOT EXISTS Prixmc ("
                + "Prixmc INT(11) NOT NULL,"
                + "created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,"
                + "updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP)";
        String sqlpercent = "CREATE TABLE IF NOT EXISTS Pourcentage_paiement ("
                + "Pourcentage_paiement INT(11) NOT NULL,"
                + "created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,"
                + "updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP)";
        String sqltranche = "CREATE TABLE IF NOT EXISTS Tranche_paiement ("
                + "Tranche_paiement INT(11) NOT NULL,"
                + "created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,"
                + "updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP)";
 if (con != null) {
        try (Statement statement = con.createStatement()) {
            statement.executeUpdate(sqladmin);
            System.out.println("Table 'admin' crée avec succès!");
            statement.executeUpdate(sqlemploye);
            System.out.println("Table 'employe' crée avec succès!");
            statement.executeUpdate(sqlclient);
            System.out.println("Table 'client' crée avec succès!");
            statement.executeUpdate(sqlprimc);
            System.out.println("Table 'prixmc' crée avec succès!");
            statement.executeUpdate(sqlpercent);
            System.out.println("Table 'percent' crée avec succès!");
            statement.executeUpdate(sqltranche);
            System.out.println("Table 'tranche' crée avec succès!");
        }
    }else {
            System.out.println("La connexion à la base de données est nulle.");
        }
    }
 private void createDatabase() {
        String url = "jdbc:mysql://localhost:3306/";
        String user = "root";
        String pass = "";
        
        String sql = "CREATE DATABASE IF NOT EXISTS jonastino";
        
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            
            try (Connection connection = DriverManager.getConnection(url, user, pass); 
                Statement statement = connection.createStatement()) {
                
                statement.executeUpdate(sql);
                System.out.println("DB crée avec succès!");
                
            }
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new AdminLogin().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(AdminLogin.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField champ_mail1;
    private javax.swing.JPasswordField champ_pass1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JButton login1;
    private javax.swing.JLabel mail1;
    private javax.swing.JLabel password1;
    // End of variables declaration//GEN-END:variables
}
