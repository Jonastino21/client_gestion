/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Adminpackage;

import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author zikrea
 */
public class AdminPage extends javax.swing.JFrame {

    private static AdminPage instanceadminpage = null;
    private DefaultTableModel model;
    private Connection connection = AdminLogin.Connect();

    /**
     * Creates new form AdminPage
     *
     * @throws java.lang.ClassNotFoundException
     * @throws java.sql.SQLException
     */
    public AdminPage() throws ClassNotFoundException, SQLException {
        initComponents();
        TableEmploye();
        setLocationRelativeTo(null);
    }

    public static AdminPage getInstance() throws ClassNotFoundException, SQLException {
        if (instanceadminpage == null) {
            instanceadminpage = new AdminPage();
        }
        return instanceadminpage;
    }

    public void setChampPrixValue(String prix) {
        SwingUtilities.invokeLater(() -> {
            this.champ_prix.setText(prix);
            this.champ_prix.revalidate();
            this.champ_prix.repaint();

        });

        System.out.println("value " + this.champ_prix.getText());
    }

    public void setChampPercentValue(String prix) {
        SwingUtilities.invokeLater(() -> {
            this.champ_percent.setText(prix);
            this.champ_percent.revalidate();
            this.champ_percent.repaint();

        });

        System.out.println("value " + this.champ_percent.getText());
    }

    public void setChampTrancheValue(String prix) {
        SwingUtilities.invokeLater(() -> {
            this.champ_tranche.setText(prix);
            this.champ_tranche.revalidate();
            this.champ_tranche.repaint();

        });

        System.out.println("value " + this.champ_tranche.getText());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void close() {
        WindowEvent closeWindow = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);
    }

    private void TableEmploye() throws ClassNotFoundException, SQLException {
        String[] colonnes = {"Id employé", "Nom", "Prénoms", "Date de naissance", "Sexe", "Cin", "Téléphone", "Adresse email", "Mot de passe"};
        DefaultTableModel model = new DefaultTableModel(null, colonnes);



        String sql = "SELECT * FROM employe";


            try (PreparedStatement preparedStatement = connection.prepareStatement(sql); ResultSet resultSet = preparedStatement.executeQuery()) {

                // Parcours du ResultSet pour récupérer les données de chaque employé
                while (resultSet.next()) {
                    // Récupération des données de chaque colonne
                    String[] afficher = new String[10];
                    afficher[0] = resultSet.getString("Id_employe");
                    afficher[1] = resultSet.getString("Nom");
                    afficher[2] = resultSet.getString("Prenoms");
                    afficher[3] = resultSet.getString("Date_de_naissance");
                    afficher[4] = resultSet.getString("Sexe");
                    afficher[5] = resultSet.getString("Cin");
                    afficher[6] = resultSet.getString("Telephone");
                    afficher[7] = resultSet.getString("Adresse_mail");
                    afficher[8] = resultSet.getString("Mot_de_passe");

                    // Ajout de la ligne au modèle de table
                    model.addRow(afficher);
                }
                // Mise à jour du modèle de la JTable
                txtaffiche.setModel(model);

            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Erreur de connexion à la base de données.", "Erreur", JOptionPane.ERROR_MESSAGE);
            }

    }

    private static int getValueFromDatabase() {

        String sql = "SELECT Prixmc FROM Prixmc LIMIT 1"; // Exemple de requête

        try ( Statement statement = AdminLogin.Connect().createStatement(); ResultSet resultSet = statement.executeQuery(sql)) {

            if (resultSet.next()) {
                // Récupère la valeur du résultat comme int
                return resultSet.getInt("Prixmc");
            }
        } catch (SQLException e) {
        }

        return 0; // Valeur par défaut en cas d'erreur ou pas de données
    }

    private static int getValueFromDatabasePercent() {
   

        String sql = "SELECT Pourcentage_paiement FROM Pourcentage_paiement LIMIT 1"; // Exemple de requête

        try (Statement statement = AdminLogin.Connect().createStatement(); ResultSet resultSet = statement.executeQuery(sql)) {

            if (resultSet.next()) {
                // Récupère la valeur du résultat comme int
                return resultSet.getInt("Pourcentage_paiement");
            }
        } catch (SQLException e) {
        }

        return 0; // Valeur par défaut en cas d'erreur ou pas de données
    }

    private static int getValueFromDatabaseTranche() {

        String sql = "SELECT Tranche_paiement FROM Tranche_paiement LIMIT 1"; // Exemple de requête

        try (Statement statement = AdminLogin.Connect().createStatement(); ResultSet resultSet = statement.executeQuery(sql)) {

            if (resultSet.next()) {
                // Récupère la valeur du résultat comme int
                return resultSet.getInt("Tranche_paiement");
            }
        } catch (SQLException e) {
        }

        return 0; // Valeur par défaut en cas d'erreur ou pas de données
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        home = new javax.swing.JPanel();
        left_frame = new javax.swing.JPanel();
        prixLabel = new javax.swing.JLabel();
        percentLabel = new javax.swing.JLabel();
        tranceLabel = new javax.swing.JLabel();
        champ_prix = new javax.swing.JTextField();
        champ_percent = new javax.swing.JTextField();
        champ_tranche = new javax.swing.JTextField();
        ajout1 = new javax.swing.JButton();
        sup1 = new javax.swing.JButton();
        ajout2 = new javax.swing.JButton();
        ajout3 = new javax.swing.JButton();
        sup2 = new javax.swing.JButton();
        sup3 = new javax.swing.JButton();
        ariaryLabel = new javax.swing.JLabel();
        perLabel = new javax.swing.JLabel();
        moisLabel = new javax.swing.JLabel();
        navbar_frame = new javax.swing.JPanel();
        label = new javax.swing.JLabel();
        right_frame = new javax.swing.JScrollPane();
        toolbarframe = new javax.swing.JToolBar();
        panel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaffiche = new javax.swing.JTable();
        listemploye = new javax.swing.JLabel();
        apropospeinture = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Admin ");
        setResizable(false);

        home.setBackground(new java.awt.Color(0, 102, 102));

        left_frame.setBackground(new java.awt.Color(204, 204, 204));

        prixLabel.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        prixLabel.setText("Prix en m²");

        percentLabel.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        percentLabel.setText("Pourcentage 1er paiement :");

        tranceLabel.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        tranceLabel.setText("Tranche paiement :");

        champ_prix.setEditable(false);
        champ_prix.setText(Integer.toString(getValueFromDatabase()));
        champ_prix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                champ_prixActionPerformed(evt);
            }
        });

        champ_percent.setEditable(false);
        champ_percent.setText(Integer.toString(getValueFromDatabasePercent())
        );

        champ_tranche.setEditable(false);
        champ_tranche.setText(Integer.toString(getValueFromDatabaseTranche())
        );

        ajout1.setBackground(new java.awt.Color(102, 204, 255));
        ajout1.setText("Ajouter");
        ajout1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajout1ActionPerformed(evt);
            }
        });

        sup1.setBackground(new java.awt.Color(255, 102, 102));
        sup1.setText("Supprimer");
        sup1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sup1ActionPerformed(evt);
            }
        });

        ajout2.setBackground(new java.awt.Color(102, 204, 255));
        ajout2.setText("Ajouter");
        ajout2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajout2ActionPerformed(evt);
            }
        });

        ajout3.setBackground(new java.awt.Color(102, 204, 255));
        ajout3.setText("Ajouter");
        ajout3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajout3ActionPerformed(evt);
            }
        });

        sup2.setBackground(new java.awt.Color(255, 102, 102));
        sup2.setText("Supprimer");
        sup2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sup2ActionPerformed(evt);
            }
        });

        sup3.setBackground(new java.awt.Color(255, 102, 102));
        sup3.setText("Supprimer");
        sup3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sup3ActionPerformed(evt);
            }
        });

        ariaryLabel.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        ariaryLabel.setText("Ariary");

        perLabel.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        perLabel.setText("%");

        moisLabel.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        moisLabel.setText("Mois");

        javax.swing.GroupLayout left_frameLayout = new javax.swing.GroupLayout(left_frame);
        left_frame.setLayout(left_frameLayout);
        left_frameLayout.setHorizontalGroup(
            left_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(left_frameLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(left_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(left_frameLayout.createSequentialGroup()
                        .addComponent(prixLabel)
                        .addGap(18, 18, 18)
                        .addComponent(champ_prix, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ariaryLabel))
                    .addGroup(left_frameLayout.createSequentialGroup()
                        .addComponent(percentLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(champ_percent, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(left_frameLayout.createSequentialGroup()
                        .addComponent(tranceLabel)
                        .addGap(18, 18, 18)
                        .addComponent(champ_tranche)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(left_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(perLabel)
                    .addComponent(moisLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(left_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(left_frameLayout.createSequentialGroup()
                        .addComponent(ajout1)
                        .addGap(7, 7, 7)
                        .addComponent(sup1))
                    .addGroup(left_frameLayout.createSequentialGroup()
                        .addComponent(ajout2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sup2))
                    .addGroup(left_frameLayout.createSequentialGroup()
                        .addComponent(ajout3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sup3)))
                .addContainerGap())
        );
        left_frameLayout.setVerticalGroup(
            left_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(left_frameLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(left_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prixLabel)
                    .addComponent(champ_prix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ajout1)
                    .addComponent(sup1)
                    .addComponent(ariaryLabel))
                .addGap(59, 59, 59)
                .addGroup(left_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(percentLabel)
                    .addComponent(champ_percent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ajout2)
                    .addComponent(sup2)
                    .addComponent(perLabel))
                .addGap(64, 64, 64)
                .addGroup(left_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tranceLabel)
                    .addComponent(champ_tranche, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ajout3)
                    .addComponent(sup3)
                    .addComponent(moisLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        navbar_frame.setBackground(new java.awt.Color(0, 153, 153));

        label.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        label.setForeground(new java.awt.Color(255, 255, 255));
        label.setText("Bonjour");

        javax.swing.GroupLayout navbar_frameLayout = new javax.swing.GroupLayout(navbar_frame);
        navbar_frame.setLayout(navbar_frameLayout);
        navbar_frameLayout.setHorizontalGroup(
            navbar_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navbar_frameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        navbar_frameLayout.setVerticalGroup(
            navbar_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navbar_frameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                .addContainerGap())
        );

        toolbarframe.setRollover(true);

        txtaffiche.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {}
            },
            new String [] {

            }
        ));
        txtaffiche.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtafficheMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                txtafficheMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(txtaffiche);

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
        );

        toolbarframe.add(panel);

        right_frame.setViewportView(toolbarframe);

        listemploye.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        listemploye.setForeground(new java.awt.Color(255, 255, 255));
        listemploye.setText("Liste Employés");

        apropospeinture.setBackground(new java.awt.Color(255, 255, 255));
        apropospeinture.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        apropospeinture.setForeground(new java.awt.Color(255, 255, 255));
        apropospeinture.setText("À propos de la peinture");

        javax.swing.GroupLayout homeLayout = new javax.swing.GroupLayout(home);
        home.setLayout(homeLayout);
        homeLayout.setHorizontalGroup(
            homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(navbar_frame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(homeLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(left_frame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(right_frame, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homeLayout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addComponent(apropospeinture)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(listemploye)
                .addGap(165, 165, 165))
        );
        homeLayout.setVerticalGroup(
            homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homeLayout.createSequentialGroup()
                .addComponent(navbar_frame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listemploye)
                    .addComponent(apropospeinture))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(left_frame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(right_frame))
                .addGap(41, 41, 41))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(home, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(home, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void champ_prixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_champ_prixActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_champ_prixActionPerformed

        public void verificationDataPrix() throws SQLException {
                if (connection != null) {
                    String sql = "SELECT Prixmc FROM Prixmc";

                    try (PreparedStatement selectStatement = connection.prepareStatement(sql)) {
                        ResultSet results = selectStatement.executeQuery();

                        if (results.next()) {
                            JOptionPane.showMessageDialog(null,
                                    "Une valeur existe déjà dans la base de données. Veuillez d'abord supprimer cette valeur avant d'en ajouter une nouvelle.",
                                    "Avertissement", JOptionPane.WARNING_MESSAGE);
                        } else {
                            Ajoutprix ap = new Ajoutprix(this);
                            ap.setVisible(true);
                        }
                    } catch (SQLException ex) {
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Erreur de connexion à la base de données.", "Erreur", JOptionPane.ERROR_MESSAGE);
                }
        }

        private void verificationDataPercent() throws SQLException {
                if (connection != null) {
                    String sql = "SELECT Pourcentage_paiement FROM Pourcentage_paiement";

                    try (PreparedStatement selectStatement = connection.prepareStatement(sql)) {
                        ResultSet results = selectStatement.executeQuery();

                        if (results.next()) {
                            JOptionPane.showMessageDialog(null,
                                    "Une valeur existe déjà dans la base de données. Veuillez d'abord supprimer cette valeur avant d'en ajouter une nouvelle.",
                                    "Avertissement", JOptionPane.WARNING_MESSAGE);
                        } else {
                            Ajoutpercent ap = new Ajoutpercent(this);
                            ap.setVisible(true);
                        }
                    } catch (SQLException ex) {
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Erreur de connexion à la base de données.", "Erreur", JOptionPane.ERROR_MESSAGE);
                }
        }

        private void verificationDataTranche() throws SQLException {
                if (connection != null) {
                    String sql = "SELECT Tranche_paiement FROM Tranche_paiement";

                    try (PreparedStatement selectStatement = connection.prepareStatement(sql)) {
                        ResultSet results = selectStatement.executeQuery();

                        if (results.next()) {
                            JOptionPane.showMessageDialog(null,
                                    "Une valeur existe déjà dans la base de données. Veuillez d'abord supprimer cette valeur avant d'en ajouter une nouvelle.",
                                    "Avertissement", JOptionPane.WARNING_MESSAGE);
                        } else {
                            Ajouttranche at = new Ajouttranche(this);
                            at.setVisible(true);
                        }
                    } catch (SQLException ex) {
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Erreur de connexion à la base de données.", "Erreur", JOptionPane.ERROR_MESSAGE);
                }
        }

        private void supprimerValeurPrix() throws SQLException {
                if (connection != null) {
                    String sqlSelect = "SELECT Prixmc FROM Prixmc";
                    try (PreparedStatement selectStatement = connection.prepareStatement(sqlSelect)) {
                        ResultSet results = selectStatement.executeQuery();

                        if (!results.next()) {
                            JOptionPane.showMessageDialog(null, "Il n'y a aucun élément", "Erreur", JOptionPane.WARNING_MESSAGE);
                        } else {
                            String sqlDelete = "DELETE FROM Prixmc";
                            try (PreparedStatement deleteStatement = connection.prepareStatement(sqlDelete)) {
                                deleteStatement.executeUpdate();
                                champ_prix.setText("");
                                JOptionPane.showMessageDialog(null, "La valeur a été supprimée avec succès.", "Succès", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                    } catch (SQLException ex) {
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Erreur de connexion à la base de données.", "Erreur", JOptionPane.ERROR_MESSAGE);
                }
        }

        private void supprimerValeurPercent() throws SQLException {
                if (connection != null) {
                    String sqlSelect = "SELECT Pourcentage_paiement FROM Pourcentage_paiement";
                    try (PreparedStatement selectStatement = connection.prepareStatement(sqlSelect)) {
                        ResultSet results = selectStatement.executeQuery();

                        if (!results.next()) {
                            JOptionPane.showMessageDialog(null, "Il n'y a aucun élément", "Erreur", JOptionPane.WARNING_MESSAGE);
                        } else {
                            String sqlDelete = "DELETE FROM Pourcentage_paiement";
                            try (PreparedStatement deleteStatement = connection.prepareStatement(sqlDelete)) {
                                deleteStatement.executeUpdate();
                                champ_percent.setText("");
                                JOptionPane.showMessageDialog(null, "La valeur a été supprimée avec succès.", "Succès", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                    } catch (SQLException ex) {
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Erreur de connexion à la base de données.", "Erreur", JOptionPane.ERROR_MESSAGE);
                }
        }

        private void supprimerValeurTranche() throws SQLException {
                if (connection != null) {
                    String sqlSelect = "SELECT Tranche_paiement FROM Tranche_paiement";
                    try (PreparedStatement selectStatement = connection.prepareStatement(sqlSelect)) {
                        ResultSet results = selectStatement.executeQuery();

                        if (!results.next()) {
                            JOptionPane.showMessageDialog(null, "Il n'y a aucun élément", "Erreur", JOptionPane.WARNING_MESSAGE);
                        } else {
                            String sqlDelete = "DELETE FROM Tranche_paiement";
                            try (PreparedStatement deleteStatement = connection.prepareStatement(sqlDelete)) {
                                deleteStatement.executeUpdate();
                                champ_tranche.setText("");
                                JOptionPane.showMessageDialog(null, "La valeur a été supprimée avec succès.", "Succès", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                    } catch (SQLException ex) {
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Erreur de connexion à la base de données.", "Erreur", JOptionPane.ERROR_MESSAGE);
                }
        }

    private void sup1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sup1ActionPerformed
        try {
            // TODO add your handling code here:
            supprimerValeurPrix();
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sup1ActionPerformed

    private void sup2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sup2ActionPerformed
        try {
            // TODO add your handling code here:
            supprimerValeurPercent();
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sup2ActionPerformed

    private void sup3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sup3ActionPerformed
        try {
            // TODO add your handling code here:
            supprimerValeurTranche();
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sup3ActionPerformed

    private void ajout1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajout1ActionPerformed
        try {
            // TODO add your handling code here:
            verificationDataPrix();
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_ajout1ActionPerformed

    private void ajout2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajout2ActionPerformed
        try {
            // TODO add your handling code here:
            verificationDataPercent();
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ajout2ActionPerformed

    private void ajout3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajout3ActionPerformed
        try {
            // TODO add your handling code here:
            verificationDataTranche();
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ajout3ActionPerformed

    private void txtafficheMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtafficheMouseReleased
        try {
            // TODO add your handling code here:
            Information_employe me = Information_employe.getInstancemodif();
            me.setVisible(true);
            int i = txtaffiche.getSelectedRow();

            DefaultTableModel model = (DefaultTableModel) txtaffiche.getModel();

            me.getChamps_nom().setText(model.getValueAt(i, 1).toString());
            me.getChamp_prenoms().setText(model.getValueAt(i, 2).toString());
            me.getChamp_birth().setText(model.getValueAt(i, 3).toString());
            me.getChamp_sexe().setSelectedItem(model.getValueAt(i, 4).toString());
            me.getChamp_cin().setText(model.getValueAt(i, 5).toString());
            me.getChamp_phone().setText(model.getValueAt(i, 6).toString());
            me.getChamp_mail().setText(model.getValueAt(i, 7).toString());
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_txtafficheMouseReleased

    private void txtafficheMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtafficheMouseClicked

    }//GEN-LAST:event_txtafficheMouseClicked

        public void supprimerEmploye() throws SQLException {
            String sql = "DELETE FROM employe WHERE Id_employe = ?";

            try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {

                int rowsAffected = preparedStatement.executeUpdate();

                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(null, "Employé supprimé avec succès.");
                } else {
                    JOptionPane.showMessageDialog(null, "Aucun employé trouvé avec cet ID.", "Erreur", JOptionPane.ERROR_MESSAGE);
                }

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Erreur lors de la suppression de l'employé.", "Erreur", JOptionPane.ERROR_MESSAGE);
            }
        }

        /**
         * @param args the command line arguments
         */
        public static void main(String args[]) {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
             */
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>

            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {

                    try {
                        new AdminPage().setVisible(true);
                    } catch (ClassNotFoundException | SQLException ex) {
                        Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ajout1;
    private javax.swing.JButton ajout2;
    private javax.swing.JButton ajout3;
    private javax.swing.JLabel apropospeinture;
    private javax.swing.JLabel ariaryLabel;
    private javax.swing.JTextField champ_percent;
    private javax.swing.JTextField champ_prix;
    private javax.swing.JTextField champ_tranche;
    private javax.swing.JPanel home;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label;
    private javax.swing.JPanel left_frame;
    private javax.swing.JLabel listemploye;
    private javax.swing.JLabel moisLabel;
    private javax.swing.JPanel navbar_frame;
    private javax.swing.JPanel panel;
    private javax.swing.JLabel perLabel;
    private javax.swing.JLabel percentLabel;
    private javax.swing.JLabel prixLabel;
    private javax.swing.JScrollPane right_frame;
    private javax.swing.JButton sup1;
    private javax.swing.JButton sup2;
    private javax.swing.JButton sup3;
    private javax.swing.JToolBar toolbarframe;
    private javax.swing.JLabel tranceLabel;
    private javax.swing.JTable txtaffiche;
    // End of variables declaration//GEN-END:variables
}
